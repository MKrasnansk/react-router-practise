{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mkras\\\\OneDrive\\\\Po\\u010D\\xEDta\\u010D\\\\Projects\\\\Courses\\\\react\\\\practise-Spa\\\\src\\\\pages\\\\AllQuotes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport QuoteList from '../components/quotes/QuoteList';\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../lib/api';\nimport LoadingSpinner from './../components/UI/LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_QUOTES = [{\n  id: 1,\n  author: 'Michal',\n  text: 'SPA is great in React!'\n}, {\n  id: 2,\n  author: 'Jozef',\n  text: 'I will go toilet!'\n}];\n\nconst AllQuotes = () => {\n  _s();\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === 'pending') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered focused\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: DUMMY_QUOTES\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AllQuotes, \"xmzqdF0SAq1bnsS9hD1yci6YQlY=\", false, function () {\n  return [useHttp];\n});\n\n_c = AllQuotes;\nexport default AllQuotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllQuotes\");","map":{"version":3,"sources":["C:/Users/mkras/OneDrive/Počítač/Projects/Courses/react/practise-Spa/src/pages/AllQuotes.js"],"names":["React","useEffect","QuoteList","useHttp","getAllQuotes","LoadingSpinner","DUMMY_QUOTES","id","author","text","AllQuotes","sendRequest","status","data","loadedQuotes","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,cAAP,MAA2B,mCAA3B;;AAEA,MAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE,QAAjB;AAA2BC,EAAAA,IAAI,EAAE;AAAjC,CADmB,EAEnB;AAAEF,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,MAAM,EAAE,OAAjB;AAA0BC,EAAAA,IAAI,EAAE;AAAhC,CAFmB,CAArB;;AAKA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,IAAI,EAAEC,YAHF;AAIJC,IAAAA;AAJI,MAKFZ,OAAO,CAACC,YAAD,EAAe,IAAf,CALX;AAOAH,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;;AAIA,MAAIC,MAAM,KAAK,SAAf,EAA0B;AACxB,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAIG,KAAJ,EAAW;AACT,wBAAO;AAAG,MAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBAAO,QAAC,SAAD;AAAW,IAAA,MAAM,EAAET;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAxBD;;GAAMI,S;UAMAP,O;;;KANAO,S;AA0BN,eAAeA,SAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport QuoteList from '../components/quotes/QuoteList'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getAllQuotes } from '../lib/api'\r\nimport LoadingSpinner from './../components/UI/LoadingSpinner'\r\n\r\nconst DUMMY_QUOTES = [\r\n  { id: 1, author: 'Michal', text: 'SPA is great in React!' },\r\n  { id: 2, author: 'Jozef', text: 'I will go toilet!' },\r\n]\r\n\r\nconst AllQuotes = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true)\r\n\r\n  useEffect(() => {\r\n    sendRequest()\r\n  }, [sendRequest])\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return <p className='centered focused'></p>\r\n  }\r\n  return <QuoteList quotes={DUMMY_QUOTES} />\r\n}\r\n\r\nexport default AllQuotes\r\n"]},"metadata":{},"sourceType":"module"}